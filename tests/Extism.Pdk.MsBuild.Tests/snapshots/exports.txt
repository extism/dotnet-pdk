#include <string.h>
#include <mono/metadata/assembly.h>
#include <mono/metadata/exception.h>

// https://github.com/dotnet/runtime/blob/v7.0.0/src/mono/wasi/mono-wasi-driver/driver.c
#include <string.h>

#include "driver.h"

#include <stdint.h>
#include <assert.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>

#define IMPORT(a, b) __attribute__((import_module(a), import_name(b)))

typedef uint64_t ExtismPointer;
// _initialize
void mono_wasm_load_runtime(const char* unused, int debug_level);

#ifdef WASI_AFTER_RUNTIME_LOADED_DECLARATIONS
// This is supplied from the MSBuild itemgroup @(WasiAfterRuntimeLoaded)
WASI_AFTER_RUNTIME_LOADED_DECLARATIONS
#endif

void initialize_runtime() {
    mono_wasm_load_runtime("", 0);
}

// end of _initialize

void mono_wasm_invoke_method_ref(MonoMethod* method, MonoObject** this_arg_in, void* params[], MonoObject** _out_exc, MonoObject** out_result);
MonoString* mono_object_try_to_string (MonoObject *obj, MonoObject **exc, MonoError *error);
void mono_print_unhandled_exception(MonoObject *exc);

MonoMethod* method_extism_print_exception;
void extism_print_exception(MonoObject* exc)
{
    if (!method_extism_print_exception)
    {
        method_extism_print_exception = lookup_dotnet_method("Extism.Pdk.dll", "Extism", "Native", "PrintException", -1);

        if (method_extism_print_exception == NULL) {
            printf("Fatal: Failed to find Extism.Native.PrintException");
        }

        assert(method_extism_print_exception);
    }

    void* method_params[] = { exc };
    MonoObject* exception = NULL;
    MonoObject* result = NULL;
    mono_wasm_invoke_method_ref(method_extism_print_exception, NULL, method_params, &exception, &result);

    if (exception != NULL) {
        const char* message = "An exception was thrown while trying to print the previous exception. Please check stderr for details.";
        mono_print_unhandled_exception(exception);
    }
}

MonoMethod* method_DoSomething;
__attribute__((export_name("DoSomething"))) int DoSomething()
{
    initialize_runtime();

    if (!method_DoSomething)
    {
        method_DoSomething = lookup_dotnet_method("SampleApp.dll", "SampleNamespace", "SampleType", "DoSomething", -1);
        assert(method_DoSomething);
    }

    void* method_params[] = { };
    MonoObject* exception = NULL;
    MonoObject* result = NULL;
    mono_wasm_invoke_method_ref(method_DoSomething, NULL, method_params, &exception, &result);
   
    if (exception != NULL) {
        const char* message = "An exception was thrown when calling DoSomething. Please check stderr for details.";
        mono_print_unhandled_exception(exception);

        extism_print_exception(exception);
        return 1;
    }
    
    int int_result = 0;  // Default value

    if (result != NULL) {
        int_result = *(int*)mono_object_unbox(result);
    }
    
    return int_result;
}
MonoMethod* method_fancy_name;
__attribute__((export_name("fancy_name"))) int fancy_name()
{
    initialize_runtime();

    if (!method_fancy_name)
    {
        method_fancy_name = lookup_dotnet_method("SampleApp.dll", "SampleNamespace", "SampleType", "DoSomeOtherStuff", -1);
        assert(method_fancy_name);
    }

    void* method_params[] = { };
    MonoObject* exception = NULL;
    MonoObject* result = NULL;
    mono_wasm_invoke_method_ref(method_fancy_name, NULL, method_params, &exception, &result);
   
    if (exception != NULL) {
        const char* message = "An exception was thrown when calling fancy_name. Please check stderr for details.";
        mono_print_unhandled_exception(exception);

        extism_print_exception(exception);
        return 1;
    }
    
    int int_result = 0;  // Default value

    if (result != NULL) {
        int_result = *(int*)mono_object_unbox(result);
    }
    
    return int_result;
}